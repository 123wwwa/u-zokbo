// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Nextauth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  discussions   Discussion[]
  Likes         Like[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Discussion {
  id                Int                 @id @default(autoincrement())
  title             String              @db.VarChar(255)
  content           String?             @db.Text
  isQna             Boolean             @default(false)
  isAccepted        Boolean             @default(false)
  views             Int                 @default(0)
  parent_id         Int?
  Parent            Discussion?         @relation("ParentChild", fields: [parent_id], references: [id], onDelete: Cascade)
  Children          Discussion[]        @relation("ParentChild")
  authorId          String
  User              User                @relation(fields: [authorId], references: [id], onDelete: NoAction)
  cAt               DateTime            @default(now())
  mAt               DateTime            @updatedAt
  Likes             Like[]
  Tags              Tag[]
  DiscussionComment DiscussionComment[]

  @@index([authorId])
}

model Like {
  discussion_id Int
  Discussion    Discussion @relation(fields: [discussion_id], references: [id], onDelete: Cascade)
  userId        String
  User          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cAt           DateTime   @default(now())

  @@id([discussion_id, userId])
}

model IPTable {
  ip       String
  id       Int
  exiresAt DateTime
  cAt      DateTime @default(now())

  @@id([ip, id])
}

model Tag {
  name        String   @id
  description String?
  cAt         DateTime @default(now())
  mAt         DateTime @updatedAt

  Discussions Discussion[]

  @@fulltext([name])
}

model Comment {
  id                Int                 @id @default(autoincrement())
  content_id        Int
  userId            String
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment           String              @db.Text
  parent_comment_id Int?
  cAt               DateTime            @default(now())
  mAt               DateTime            @updatedAt
  DiscussionComment DiscussionComment[]

  @@index([userId])
}

model DiscussionComment {
  discussion_id Int
  Discussion    Discussion @relation(fields: [discussion_id], references: [id], onDelete: Cascade)
  comment_id    Int
  Comment       Comment    @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@id([discussion_id, comment_id])
}
